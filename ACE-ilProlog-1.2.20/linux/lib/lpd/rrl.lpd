
name('RRL').

authors(['Kurt Driessens, Jan Ramon']).

contact(['kurtd@cs.kuleuven.ac.be, janr@cs.kuleuven.ac.be']).

load_message('Loading RRL (Relational Reinforcement Learner) for ACE').

use_module('rrl/rrl_main').

use_module('rrl/rrl_policies').

class(rrl_policy,[],[abstract],[method(chooseAction(Type,QFunction,State,AList,Action,MaxQ),false,[virtual,abstract])]).

class(rrl_optimal_policy,[rrl_policy],[],[method(chooseAction(Type,QFunction,State,AList,Action,MaxQ),chooseBestAction__M_rrl_policies(QFunction,State,AList,Action,MaxQ),[virtual])]).

class(rrl_botzmann_policy,[rrl_policy],[],[method(chooseAction(Type,QFunction,State,AList,Action,MaxQ),chooseStochAction__M_rrl_policies(QFunction,State,AList,Action,MaxQ),[virtual])]).

class(rrl_teacher,[rrl_policy],[],[method(chooseAction(Type,QFunction,State,AList,Action,'notcomp'),rrl_env_getActionFromTeacher(State,Action),[virtual])]).

class(rrl_direct_probabilities_policy,[rrl_policy],[],[method(chooseAction(Type,Function,State,AList,Action,'notcomp'),chooseProbabilisticAction__M_rrl_policies(Function,State,AList,Action),[virtual])]).

end_of_header.

command(rrl,rrl,[],'rrl -- rrl','Starts the relational reinforcement learning process',rrl_main_run,rrl_main,[globalvars]).

command(mrrl,mrrl,[N],'mrrl(N) -- mrrl(N)','Starts N sequential relational reinforcement learning processes ',rrl_main_run(N),rrl_main,[globalvars]).

setting(rrl_Qlearner,tg,I,(member(I,[tg,rib3,ribc,csribr,earib,nlp,kbr,tni,irc,tgconv,tb])),'must be tg or rib3 or csrib or earib or ribc or nlp or kbr or tni or irc or tgconv or gtb').

setting(rrl_numberOfEpisodes,1000,I,(integer(I)),'must be an integer').

setting(rrl_testFrequency,100,I,(I = off ; (integer(I), I > 0)),'must be off or a positive integer').

setting(rrl_numberOfTests,100,I,(integer(I)),'must be an integer').

setting(rrl_saveQFunctions,50,I,(I = off ; (integer(I), I > 0)),'must be off or a positive integer').

setting(rrl_gamma,0.9,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_alpha,1.0,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_startTemperature,5.0,I,(number(I)),'must be a number').

setting(rrl_minTemperature,1.0,I,(number(I)),'must be a number').

setting(rrl_temperatureDecay,0.95,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_teacherFrequency,off,I,(I = off ; (integer(I), I > 0)),'must be off or a positive integer').

setting(rrl_numberOfQuestions,5,I,(integer(I)),'must be an integer').

setting(rrl_askQuestions,no,I,(member(I,[yes,no])),'must be yes or no').

setting(rrl_freezePolicy,yes,I,(member(I,[yes,no])),'must be yes or no').

setting(rrl_lambda,0.5,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_Plearner,off,I,(member(I,[off,tg,rib3])),'must be off, tg or rib3').

setting(rrl_startPlearnerAt,0,I,(integer(I)),'must be an integer').

setting(rrl_qUpdate,mdp,I,(member(I,[mdp,smdp,td])),'must be mdp, smdp or td').

setting(rrl_typeOfTests,epochs,I,(member(I,[epochs,values,epochs_sigma])),'must be epochs or values').

setting(rrl_action_after_end_dangerous,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_afterstates,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_c_objects,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_show_qvalues,no,I,(I = no ; I = yes),'must be yes or no').
