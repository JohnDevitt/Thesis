
name('Aleph').

end_of_header.

command(aleph,a,[],'aleph -- a','start the Aleph rule induction process',aleph_main,aleph).

setting(i,2,I,(integer(I), I > 0),'must be a strictly positive number').

setting(verbosity,1,I,(integer(I), I >= 0),'must be a positive number').

setting(stage,command,X,member(X,[command]),'should be command').

setting(construct_bottom,saturation,I,member(I,[saturation]),'must be saturation').

setting(check_useless,false,I,(member(I,[false,true])),'must be false or true').

setting(check_redundant,false,I,(member(I,[false,true])),'must be false or true').

setting(refineop,false,I,(member(I,[false,true])),'must be false or true').

setting(lazy_on_cost,false,I,(member(I,[false,true])),'must be false or true').

setting(nodes,5000,I,(integer(I), I >= 0),'must be a positive number').

setting(samplesize,1,I,(integer(I), I >= 0),'must be a positive number').

setting(minpos,1,I,(integer(I), I >= 0),'must be a positive number').

setting(gsamplesize,100,I,(integer(I), I >= 0),'must be a positive number').

setting(clauselength,4,I,(integer(I), I >= 0),'must be a positive number').

setting(explore,false,I,(member(I,[false,true])),'must be false or true').

setting(caching,false,I,(member(I,[false,true])),'must be false or true').

setting(greedy,false,I,(member(I,[false,true])),'must be false or true').

setting(refine,false,I,(member(I,[false,true])),'must be false or true').

setting(proof_strategy,restricted_sld,I,(member(I,[restricted_sld])),'must be restricted_sld').

setting(search,bf,I,(member(I,[bf])),'must be bf').

setting(prune_defs,false,I,(member(I,[false,true])),'must be false or true').

setting(evalfn,coverage,I,(member(I,[coverage])),'must be coverage').

setting(depth,5,I,(integer(I), I >= 0),'must be a positive number').

setting(noise,0,I,(integer(I), I >= 0),'must be a positive number').

setting(print,4,I,(integer(I), I >= 0),'must be a positive number').

setting(splitvars,false,I,(member(I,[false,true])),'must be false or true').

setting(version,_,I,true,'can be anything').
