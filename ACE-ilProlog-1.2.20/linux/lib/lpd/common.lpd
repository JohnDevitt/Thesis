
name('Common').

autoload(use).

class(superclass,[],[abstract],[method(write_object(Type,_Value,File,_GVars,_Opts),(write(File,'>>> write_object not defined for '), write(File,Type), write(File,'.'), nl(File)),[virtual]),method(write_object(Type,Value,GVars),(telling(File), write_object(Type,Value,File,GVars,[])),[virtual]),method(write_object(Type,Value,File,Options),(write_object(Type,Value,File,unknown,Options)),[virtual]),method(write_object(Type,Value),(write_object(Type,Value,unknown)),[virtual])]).

class(simple,[],[abstract],[method(write_object(Type,Value,File,GVars,Options),write_simple_object__M_oo_support(GVars,File,Value,Options),[virtual])]).

class(int,[simple],[],[]).

class(atom,[simple],[],[]).

class(float,[simple],[],[]).

classdef_module(settings).

classdef_module(logic).

classdef_module(compact).

classdef_module(iterator).

classdef_module(stream).

classdef_module(sections).

classdef_module(flocks).

end_of_header.

command(help,h,[],'help -- h','Give a short overview of the available commands',ace_help,interactive).

command(help,h,[Com],'help(Command) -- h(Command)','Print specific help for Command',ace_help(Com),interactive).

command(quit,q,[],'quit -- q','Exit this ace session',ace_quit,interactive).

command(prompt,p,[],'prompt -- p','Exit ace interactive session, go to prolog prompt  (not for runtime)',ace_prompt,meta_interp,[globalvars]).

command(show_settings,ss,[],'show_settings -- ss','Show the current settings on the screen',show_settings,interactive).

command(show_settings,ss,[Type],'show_settings(name) -- ss(name)','Show the current settings for package "name" on the screen',show_settings(Type),interactive).

command(show_language,sl,[],'show_language -- sl','Show the current language on the screen',show_language,interactive).

command(show_expanded_language,sel,[],'show_expanded_language -- sel','Show the rmodes of the current language after preprocessing on the screen',show_expanded_language,interactive,[globalvars]).

command(show_packages,sps,[],'show_packages -- sps','Show information about the loaded loadable packages',show_loaded_packages,loadable_packages).

command(show_package,sp,[Name],'show_package(Name) -- sp(Name)','Show information about the loadable package Name',show_loadable_package(Name),loadable_packages).

command(show_user_vars,suvs,[],'show_user_vars -- suvs','Show all user vars',show_user_vars,interactive,[globalvars]).

command(show_package_vars,spvs,[],'show_package_vars -- suvs','Show all package vars',show_package_vars,interactive,[globalvars]).

command(show_var,sv,[Key],'show_var(name) -- sv(name)','Show a user var',show_user_var(Key),oo_support,[globalvars]).

command(set_default_settings,sds,[],'set_default_settings -- sds','Set the settings to the default',set_default_settings,settings,[globalvars]).

command(load_settings,ls,[],'load_settings -- ls','Load the settings file for the current application',load_settings,settings,[globalvars]).

command(set,s,[Name,Value],'set(Name, Value) -- s(Name, Value)','Set the setting Name to Value',set_setting_command(Name,Value),settings,[globalvars]).

command(use_package,up,[Name],'use_package(Name) -- up(Name)','Load the definition of the loadable package Name',use_package(Name),loadable_packages,[globalvars]).

command(load_package,lp,[Name],'load_package(Name) -- lp(Name)','Completely load the loadable package Name',load_package(Name),loadable_packages,[globalvars]).

command(knowledge_info,ni,[],'knowledge_info -- ni','Report information about the knowledge base',report_knowledge_info,knowledge,[globalvars]).

setting(load,key,B,[key,examples,term,compact,models,stream],'must be either key, examples, term or compact (models has been replaced by examples)').

setting(talking,3,B,[0,1,2,3,4,5,6],'must be either 0,1,2,3 or 4').

setting(outerloop,queries,T,[examples,queries],'must be examples or queries').

setting(use_packs,ilp,X,[none,ilp,meta,adpack,comp,cf_comp,cf_ilp,cf_jit_ilp],'must be none (no packs), ilp (ilProlog packs), cf_ilp (ilProlog packs with control flow compilation), cf_jit_ilp(ilProlog packs with lazy control flow compiilation, meta (meta-called packs), adpack (ilProlog ADPacks), comp (Compile queries)').

setting(classes,[],V,(V = [] ; is_closed_list(V)),'should be a list of strings').

setting(leave_out,false,_,true,'').

setting(granularity,10,N,(integer(N), N >= 0),'must be a positive number').

setting(expert_implicit_language,off,R,[on,off],'must be on or off').

setting(language_warnings,on,R,[on,off],'must be on or off').

setting(mi_distance_maxsample,100,N,(integer(N), N > 0),'must be a positive integer').

setting(default_preprocessing,off,R,[on,off],'must be on or off').

setting(default_min,1,N,(integer(N), N >= 1),'must be a positive number (>0)').

setting(default_prefix,off,R,[on,off],'must be on or off').

setting(report_timings,off,R,[on,off],'must be on or off').

setting(randomise,none,N,true,'must be "none", "time", or an integer seed').

setting(kb_file,default,N,true,'default or path to the .kb file to use').

setting(bg_file,default,N,true,'default or path to the .bg file to use').

setting(output_dir,default,N,true,'default or directory name for the output files').

setting(transform_queries,'once',T,['none','theta','cut','cut_nr','once','once_nr','smart','theta.cut','theta.once','theta.smart','smart.once','theta.smart.once'],'must be a valid query transform').

setting(discretize,entropy,_,[entropy,equal_freq],'must be entropy or equal_freq').

setting(nsplit_talking,off,_,[on,off],'Must be on or off').

setting(nsplit_version,basic,_,[basic,weights],'Possibilities: basic or weights').

setting(nsplit_sorting,basic,_,[basic,partial,well_behaved],'Possibilities: basic, partial or well_behaved(only for classification)').

setting(nsplit_unsorted_fractions,0,_,true,'Should be between 0 and 1. 0 corresponds to full sorting (evaluating all possible thresholds).').

setting(log_pid,off,_,true,'Log process ID to file').

setting(max_query_len,inf,_,true,'Set maximum query length').

setting(compatibility,'ace1.1',_,['ace1.1','ace1.2'],'Set compatibility options').

setting(write_predictions,[],_,true,'Write predictions to file, e.g.: [testing] or [training, testing] (extra options: distribution, mest(X))').

setting(select_root_models,on,T,[on,off],'Select root examples').

setting(example_cache,102400,T,true,'Set size for example cache (default 100MB)').

setting(aggregate_refinement,no,R,[yes,no],'must be yes or no').

setting(aggregate_lookahead,no,R,[yes,no],'must be yes or no').

setting(aggregate_maxconjuncts,2,R,number(R),'must be an integer').

setting(aggregate_recursion,no,R,[yes,no],'must be yes or no').

setting(aggregate_refiners,no,R,[yes,no],'must be yes or no').

setting(query_sample_algo,smart,R,[naive,smart],'must be naive or smart').

setting(query_sample_probability,1.0,R,((number(R), R > 0, R =< 1) ; R = sqrt),'must be a positive real number =< 1 or "sqrt"').

setting(rmode_inst_generation_prob,1.0,R,((number(R), R > 0, R =< 1) ; R = sqrt),'must be a positive real number =< 1 or "sqrt"').

setting(inst_generation_prob,1.0,R,((number(R), R > 0, R =< 1) ; R = sqrt),'must be a positive real number =< 1 or "sqrt"').

setting(single_query_generation,no,R,[yes,no],'must be a yes or no').

setting(query_batch_size,default,T,true,'should be an integer').

setting(intra_literal_sharing,yes,T,[yes,no],'must be a yes or no').

setting(tilde_mode,classify,B,[classify,regression,cluster,user(_,_,_)],'must be either classify, regression, or cluster').

setting(heuristic,gainratio,X,true,'must be a valid heuristic (see manual)').
