
name('Tilde').

authors(['Hendrik Blockeel']).

contact(['Hendrik.Blockeel@cs.kuleuven.ac.be']).

load_message('Loading Tilde').

use_module('prediction/tilde/tildewrapper').

class(tilde_mode,[],[],[method(tree_accuracy(_GV,_T,_L,_A),true,[]),method(prune(_GV,T,T),true,[]),method(safe_prune(T,T),true,[]),method(write_averages(O),true,[]),method(write_averages_html,true,[]),method(discretize(_N,_TV,_TM,_Query,_Vars,_Result),true,[]),method(write_leaf(M,R,D,N,I,H),write_leaf_default__M_prettyprint(M,R,D,N,I,H),[])]).

class(tilde_mode_classify,[tilde_mode],[],[method(tree_accuracy(GV,T,L,A),tree_acc__M_evalt(GV,T,L,A),[]),method(prune(GV,T,T1),prune_tree__M_classify(GV,T,T1),[]),method(safe_prune(T,T1),safe_prune_tree__M_classify(T,T1),[]),method(discretize(N,TV,TM,Query,Vars,Result),discretize_vc__M_discretize(N,TV,TM,Query,Vars,Result),[]),method(write_averages(O),write_averages__M_classify(O),[]),method(write_averages_html,write_averages_html__M_classify,[])]).

class(tilde_mode_regression,[tilde_mode],[],[method(tree_accuracy(GV,T,L,A),tree_accuracy__M_regression(GV,T,L,A),[]),method(prune(GV,T,T1),prune_tree__M_regression(GV,T,T1),[]),method(safe_prune(T,T1),safe_prune_tree__M_regression(T,T1),[]),method(discretize(N,TV,TM,Query,Vars,Result),discretize_vr__M_discretize(N,TV,TM,Query,Vars,Result),[]),method(write_averages(O),write_averages__M_regression(O),[]),method(write_averages_html,write_averages_html__M_regression,[])]).

end_of_header.

command(tilde,t,[],'tilde -- t','Start the Tilde decision tree induction process',tilde_main,tildewrapper,[globalvars]).

command(nfoldt,nft,[N],'nfoldt(N) -- nft(N)','Perform an N-fold crossvalidation with Tilde',nfold(N),tildewrapper,[globalvars]).

command(nfoldt,nft,[N,R],'nfoldt(N,R) -- nft(N,R)','Perform an N-fold crossvalidation with Tilde using seed R for random generator',nfold(N,R),tildewrapper,[globalvars]).

command(leave_one_out_from_list,looflt,[L],'leave_one_out_from_listt(L) -- looflt(L)','Perform a crossvalidation with Tilde using a list of group ID''s',leave_one_out_from_list(L),tildewrapper,[globalvars]).

command(discretize,dis,[],'discretize -- dis','Perform Tildes discretization method',do_discretize,tildewrapper,[globalvars]).

setting(tilde_version,'3.0',B,['2.2','3.0'],'must be 2.2 or 3.0').

setting(ftest,0.05,B,[1.0,0.1,0.05,0.01,0.005,0.001],'must be either 1.0, 0.1, 0.05, 0.01, 0.005, 0.001').

setting(minimal_cases,2,N,(integer(N), N >= 0),'must be a positive number').

setting(tilde_test_eval_model,std,X,member(X,[std,slr]),'must be a valid model for test evaluation (std = standard, slr = single linear regression)').

setting(accuracy,1.0,R,(number(R), R > 0, R =< 1),'must be a positive real number =< 1').

setting(max_querytime,100,MaxTime,number(MaxTime),'must be a number').

setting(sampling_strategy,fixed(1000),B,ifthenelse((B = fixed(N), N >= 1),true,member(B,[none,user(_)])),'must be either fixed(Number), or user(Pred)').

setting(multiscore,off,X,(X = off ; is_closed_list(X)),'must be either off or a list of couples of queries').

setting(multiscore_2,off,X,(X = off ; is_closed_list(X)),'must be either off or a list of couples of queries').

setting(discretization,none,X,ifthenelse((X = bounds(N), number(N)),true,X = none),'must be none or bounds(N) with N a natural number').

setting(pruning,c45,R,[c45,safe,vsb,c45_nosafepruning,none,mdl,bic,chi_square(_),randomisation(_,_,_)],'must be either c45 (=default), safe, vsb, c45_nosafepruning, none, mdl, bic, chi_square(Alpha) or randomisation(NbRands,Alpha,RandType)').

setting(stopping_criterion,mincases,R,[mincases,mdl,bic,chi_square(_),randomisation(_,_,_)],'must be either mincases (=default), mdl, bic, chi_square(Alpha) or randomisation(NbRands,Alpha,RandType)').

setting(random_validation_set,0,R,(number(R), R >= 0, R =< 1),'must be a positive real number =< 1').

setting(random_test_set,0,R,(number(R), R >= 0, R =< 1),'must be a positive real number =< 1').

setting(confidence_level,0.25,R,(number(R), R > 0, R =< 1),'must be a positive real number =< 1').

setting(prune_rules,false,X,[true,false],'must be true or false').

setting(output_options,[c45,prolog],X,each_member__M_interactive(X,[c45,c45c,c45e,c45ce,lp,prolog,original,elaborate,exec,global,model,roc01,c45_probab,prolog_probab,all_models,likelihood,ldt_term,rms_error,ldt_prob_term]),'must be a list of allowed output options (see manual)').

setting(m_estimate,none,T,true,'Specify which m_estimate to use when computing probabilities: none (=default), laplace or a pair (M,Priori) with M a number and Priori a priori distribution on the classes e.g. [pos:0.4,neg:0.6]').

setting(resume,off,X,[write,read,off],'must be write, read or off').

setting(precompute,[],X,is_closed_list(X),'must be a list of predicates').

setting(complexity_penalty,1.0,X,number(X),'must be a number').

setting(classify_mode,0,X,number(X),'must be a number').

setting(show_averages,1,X,number(X),'must be a number').

setting(combination_rule,sum,R,each_member__M_interactive(X,[product,sum,max,min,median,majority_vote,product_logit,logit_eqpr]),'must be a valid list of combination rules').

setting(repeat_exec_time,1,_R,true,'must be a positive real number =< 1').

setting(tilde_rst_optimization,no,_R,[yes,no,auto],'must be a yes, no or auto').

setting(roulette_wheel_selection,no,R,[yes,no],'must be a yes or no').

setting(out_of_bag,no,R,[yes,no],'must be a yes or no').

setting(special_min,0.0,R,true,'must be a real value').

setting(query_length_bias,short,T,[short,long],'should be short or long').

setting(exhaustive_lookahead,0,X,number(X),'must be a number').

setting(tilde_maxdepth,inf,T,true,'should be an integer').

setting(write_ensemble_models,[],L,[List,all],'must be a list of numbers or all').

setting(combining_rules,off,_R,[full,naive,off],'must be off (default), full or naive').

setting(combining_rules_EMruns,5,X,number(X),'number of runs (restarts+1) of the EM algorithm (must be a natural number; default 5)').

setting(combining_rules_EMiters,10,X,number(X),'max number of iterations in one run of the EM algorithm (must be a natural number; default 10)').
