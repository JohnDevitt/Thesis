
name('RRL3').

authors(['Kurt Driessens, Tom Croonenborghs']).

contact(['kurtd@cs.kuleuven.be,tomc@cs.kuleuven.be']).

load_message('Loading RRL (Relational Reinforcement Learner) for ACE').

use_module('rrl3/rrl3').

classdef_module(rrl3_environment).

classdef_module(rrl3_guidance).

classdef_module(rrl3_policy).

classdef_module(rrl3_actions).

classdef_module(rrl3_learner).

classdef_module(rrl3_sarsa).

classdef_module(rrl3_agent).

classdef_module(rrl3_controller).

end_of_header.

command(rrl3,rrl3,[],'rrl3 -- rrl3','Starts the relational reinforcement learning process',rrl3_main_run,rrl3).

command(mrrl3,mrrl3,[N],'mrrl3(N) -- mrrl3(N)','Starts N sequential relational reinforcement learning processes ',rrl3_main_run(N),rrl3).

setting(agent_mode,single,I,(member(I,[single,multi(N)])),'must be either single or multi(N) with N the number of agents').

setting(rrl_Qlearner,tg,I,(member(I,[tg,rib3,ribc,csribr,earib,nlp,kbr,tni,irc,tgconv,tg3])),'must be tg or rib3 or csrib or earib or ribc or nlp or kbr or tni or irc or tgconv or tg3').

setting(rrl_Qlearner_options,[],T,(is_list(T) ; T = []),'should be a list of options:  ...').

setting(rrl_gamma,0.9,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_alpha,1.0,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_numberOfEpisodes,1000,I,(integer(I)),'must be an integer').

setting(rrl_testFrequency,100,I,(I = off ; (integer(I), I > 0)),'must be off or a positive integer').

setting(rrl_numberOfTests,100,I,(integer(I)),'must be an integer').

setting(rrl_startEpisode,0,I,(integer(I)),'must be an integer').

setting(rrl_exploration_policy,boltzman([startTemperature(5.0),minTemperature(1.0),temperatureDecay(0.95)]),EP,(EP = boltzman(_) ; EP = epsilon(_)),'must be boltzman(List) or epsilon(E)').

setting(rrl_test_policy,greedy,TP,(TP = boltzman(_) ; TP = epsilon(_) ; TP = greedy ; TP = exploration),'must be greedy, boltzman(List), epsilon(E) or exploration').

setting(rrl_startTemperature,5.0,I,(number(I)),'must be a number').

setting(rrl_minTemperature,1.0,I,(number(I)),'must be a number').

setting(rrl_temperatureDecay,0.95,I,(number(I)),'must be between 0.0 and 1.0').

setting(rrl_output_options,[],T,(is_list(T) ; T = []),'should be a list of options: qfunction, pfunction, ...').

setting(rrl_teacherFrequency,off,I,(I = off ; (integer(I), I > 0)),'must be off or a positive integer').

setting(rrl_numberOfQuestions,5,I,(integer(I)),'must be an integer').

setting(rrl_askQuestions,no,I,(member(I,[yes,no])),'must be yes or no').

setting(rrl_Plearner,off,I,(member(I,[off,tg,tgconv,rib3])),'must be off, tg or rib3').

setting(rrl_startPlearningAt,0,I,(integer(I)),'must be an integer').

setting(rrl_startPlearnerPolicyAt,0,I,(integer(I)),'must be an integer').

setting(rrl_search_in_testing,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_search_in_learning,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_search_depth,1,I,(number(I)),'must be a number').

setting(rrl_q_directed_exploration,no,I,(I = no ; I = yes),'must be yes or no').

setting(rrl_use_fixed_policy,no,I,(member(I,[no,yes(_)])),'must be no or yes with the name of the predicate to call').

setting(rrl_episodic_learning,yes,I,(member(I,[no,yes])),'must be no or yes').
