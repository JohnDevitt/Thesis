
rrl_env_init.
rrl_env_cleanup.

%rrl_env_worldType(test,X):-
%        random(3,R),
%        X is R + 3.
%rrl_env_worldType(X,3):-
%        Y is X mod 3,
%        Y = 1.
%rrl_env_worldType(X,4):-
%        Y is X mod 3,
%        Y = 2.
rrl_env_worldType(_,3).

goal_world_type(3).

rrl_env_stopcondition(_,blocks(_,_,_,0)).
rrl_env_stopcondition(_,blocks(_,On,unstack,_)):-
	findall(X,(member(on(_,Y),On),Y\=floor),List),
	length(List,0).
rrl_env_stopcondition(_,blocks([X],_,stack,_)).
rrl_env_stopcondition(_,blocks(_,OnList,OnLiteral,_)):-
	member(OnLiteral,OnList).

rrl_env_equal(blocks(Clear,On,Goal,_),blocks(Clear,On,Goal,_)).

rrl_env_getActionFromTeacher(State,Action):-
	rrl_env_worldType(teacher,N),
	rrl_env_possibleActions(N,State,AList),
	chooseBestAction(State,AList,Action).

rrl_env_distance(saPair(State,Action),saPair(State2,Action2),Dist):-
	rrl_env_apply(_,State,Action,blocks(_,On,_,_),_),
	findall(H,(block(On,B),height1(On,B,H)),HL),
        listMax(HL,Max),
        rrl_env_apply(_,State2,Action2,blocks(_,On2,_,_),_),
        findall(H2,(block(On2,B2),height1(On2,B2,H2)),HL2),
        listMax(HL2,Max2),
	Dist is abs(Max - Max2).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
chooseBestAction(State,AList,Action):-
        fetchQs(State,AList,QList),
        selectBest(AList,QList,Action).
fetchQs(_,[],[]).
fetchQs(State,[Action|AList],[Q|QList]):-
        (nonoptimal(State,Action) -> Q = 0 ; Q = 1),
        fetchQs(State,AList,QList).
selectBest(AList,QList,BestAction):-
        QList=[Q1|QR],
        maxOfList(QR,Q1,MaxQ),
        selectAllBest(AList,QList,MaxQ,[],BestList),
        length(BestList,L),
        random(L,R),
        N is R+1,
        nth(N,BestList,BestAction).
selectAllBest([],[],_,InList,InList).
selectAllBest([ThisAction|AList],[MaxValue|QList],MaxValue,InList,OutList):-
        selectAllBest(AList,QList,MaxValue,[ThisAction|InList],OutList).
selectAllBest([_|AList],[_|QList],MaxValue,InList,OutList):-
        selectAllBest(AList,QList,MaxValue,InList,OutList).
maxOfList([],Q,Q).
maxOfList([A|R],I,O) :-
        T is max(A,I),
        maxOfList(R,T,O).

nonoptimal(State,move(X,Y)):-
        height(State,Y,HY),
        height(State,A,HA),
        HY<HA.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

rrl_env_possibleActions(_,blocks(Clear,On,_,_),List):-
	findall(A,
		(member(clear(X),Clear),
		 member(clear(Y),Clear),
		 X\=Y,
		 A = move(X,Y)),
		List1),
	findall(B,
		(member(clear(X),Clear),
		 \+(member(on(X,floor),On)),
		 B = move(X,floor)),
		List2),
	append(List1,List2,List).

rrl_env_beginstate(teacher,blocks(Clear,On,Goal,Steps)):-
        !,
        rrl_env_worldType(teacher,Type),
        rrl_env_beginstate(Type,blocks(Clear,On,Goal,Steps)).
rrl_env_beginstate(test,blocks(Clear,On,Goal,Steps)):-
	!,
	rrl_env_worldType(test,Type),
	rrl_env_beginstate(Type,blocks(Clear,On,Goal,Steps)).
rrl_env_beginstate(Number,blocks(Clear,On,Goal,Steps)):-
	Goal = stack,
	buildblocks(Number,List),!,
	stochstate(List,State),
	findall(A,(member(A,State),A=..[clear|_]),Clear),
	findall(B,(member(B,State),B=..[on|_]),On),
	\+(rrl_env_stopcondition(Number,blocks(Clear,On,Goal,5))),!,
	%wln(blocks(Clear,On,Goal,0)),
	(
	  Goal = unstack,
	  findall(Y,(member(on(_,Y),On),Y\=floor),YL),
	  length(YL,Steps)
	;
	  Goal = stack,
	  findall(H,(block(On,B),height1(On,B,H)),HL),
	  listMax(HL,Max),
	  Steps is Number - Max
	;
	  Goal = on(X,Y),
	  findall(B,above(blocks(Clear,On,Goal,0),B,X),List1),
	  findall(C,above(blocks(Clear,On,Goal,0),C,Y),List2),
	  merge(List1,List2,OL),
	  length(OL,Len),
	  Steps is Len + 1
	).

listMax([X],X).
listMax([X|L],M):-
	listMax(L,T),
	M is max(T,X).
merge([],L,L).
merge([X|R],L,O):-
	member(X,L),
	merge(R,L,O).
merge([X|R],L,O):-
	merge(R,[X|L],O).

rrl_env_apply(_,
	      blocks(Clear,On,Goal,Steps),
	      move(X,floor),
	      blocks(NewClear,NewOn,Goal,NewSteps),
	      Reward):-
	delete(on(X,Y),On,TmpOn),
	NewOn = [on(X,floor)|TmpOn],
	NewClear = [clear(Y)|Clear],
	NewSteps is Steps - 1,
	calcReward(NewClear,NewOn,Goal,Reward),!. 
rrl_env_apply(_,
	      blocks(Clear,On,Goal,Steps),
	      move(X,Y),
	      blocks(NewClear,NewOn,Goal,NewSteps),
	      Reward):-
	delete(on(X,Z),On,TmpOn),
	(Z = floor
	->
	    delete(clear(Y),Clear,NewClear),
	    NewOn = [on(X,Y)|TmpOn]
	;
	    delete(clear(Y),Clear,TmpClear),
	    NewClear = [clear(Z)|TmpClear],
	    NewOn = [on(X,Y)|TmpOn]
	),
	NewSteps is Steps - 1,
	calcReward(NewClear,NewOn,Goal,Reward),!.


calcReward(_,On,unstack,1):-
	findall(X,(member(on(_,Y),On),Y\=floor),List),
	length(List,0),!.
calcReward([X],_,stack,1):- !.
calcReward(_,On,on(X,Y),1):-
	member(on(X,Y),On),!.
calcReward(_,_,_,0).

%%%%%%%%%%%%%%%%%%%%%%% STATES %%%%%%%%%%%%%%%%%%%%%%%%%%%

makestates([],FinalBins,FinalBins).
makestates([B|Blocks],Current,Final) :-
    addtobin(B,Current,NewCurrent),
    makestates(Blocks,NewCurrent,Final).

buildblocks(Number,List):-
	bb(Number,[],List).
bb(0,List,List).
bb(Number,In,Out):-
	N is Number-1,
	bb(N,[Number|In],Out).

addtobin(B,[],[[B]]).
addtobin(B,[First | Rest], [[B|First]|Rest]).
addtobin(B,[First | Rest], [First|Result]):-
    addtobin(B,Rest, Result).

convertbin([],Final,Final).
convertbin([XR | Rest], Curr, Final) :-
        permute(XR,[N|NXR]),
        convertlist([N|NXR],List),
        convertbin(Rest,Curr,Temp),
        append(List,[clear(N)|Temp],Final).

stochstate(Blocks,State) :-
	stochpermute(Blocks,NBlocks),
        length(Blocks,N),
	drawnumberofbins(N,K),
        kbins(NBlocks,RBlocks,K,Bins),
        stochmakestates(RBlocks,Bins,Finalbin),
        stochconvertbin(Finalbin,[],State).

stochpermute([],[]) :- ! .
stochpermute([X],[X]) :- !.
stochpermute(X,[Y|NewY]) :-
        stochdelete(Y,X,NewX),
        stochpermute(NewX,NewY).

stochdelete(X,List,Y):-
	length(List,L),
	random(L,R), I is R + 1,
	nth(I,List,X),
	delete(X,List,Y),!.

delete(X,[X|Y],Y).
delete(X,[Y|Z],[Y|W]) :- delete(X,Z,W).

kbins(B,B,0,[]) :- ! .
kbins([A|B],C,K,[[A]|D]) :-
	K1  is K - 1,
	kbins(B,C,K1,D).

stochmakestates([],FinalBins,FinalBins).
stochmakestates([B|Blocks],Current,Final) :-
	stochaddtobin(B,Current,NewCurrent),
	stochmakestates(Blocks,NewCurrent,Final).

stochaddtobin(B,Current,New):-
	length(Current,L),
	random(L,I),
	sinsert(B,I,Current,New).

sinsert(B,0,[A|R],[[B|A]|R]) :- ! .
sinsert(B,I,[A|Current],[A|New]) :-
	I1 is  I - 1,
	sinsert(B,I1,Current,New).

stochconvertbin([],Final,Final).
stochconvertbin([XR | Rest], Curr, Final) :-
        stochpermute(XR,[N|NXR]),
        convertlist([N|NXR],List),
        stochconvertbin(Rest,Curr,Temp),
        append(List,[clear(N)|Temp],Final).

convertlist([X],[on(X,floor)]).
convertlist([X,Y|R],[on(X,Y)|Res]) :-
        convertlist([Y|R],Res).


%%%%%%%%%%%% NUMBERS %%%%%%%%%%%%%%%

gonumbers(B) :-
	calcfact(B),
	assert(stackno(1,1,1)),
	wln(['stackno(1,1,1).']),
	for(i,I,2,B,
	    (factorial(I,F),
		(wln(['stackno(',I,',1,',F,').']),assert(stackno(I,1,F))),
		(wln(['stackno(',I,',',I,',1).']),assert(stackno(I,I,1))) )
	   ), 
	for(i,I,2,B, 
	    (Iminus1 is I - 1, 
		for(j,J,2,Iminus1,
		    (Jminus1 is J - 1, 
			stackno(Iminus1,J,X),
			stackno(Iminus1,Jminus1,Y),
			%write((I,J,X,Y)), nl,
			Z is X*(I+J-1) + Y, 
			(wln(['stackno(',I,',',J,',',Z,').']),assert(stackno(I,J,Z))) )
		   ))
	   ),
	for(i,I,1,B,sumstate(I)). 

sumstate(I) :- 
	sumstate(0,I,0,N), 
	(wln(['statno(',I,',',N,').']),assert(statno(I,N))).

sumstate(X,I,PS,N) :-
	X1 is X + 1,
	stackno(I,X1,S), 
	NPS is PS + S, 
	sumstate(X1,I,NPS,N).
sumstate(I,I,N,N).
 
calcfact(N) :- 
	(wln(['factorial(1,1).']),assert(factorial(1,1))),
	for(i,I,1,N-1,
	    (Iplus1 is I + 1, 
		factorial(I,IF), 
		Iplus1F is Iplus1*IF, 
		(wln(['factorial(',Iplus1,',',Iplus1F,').']),assert(factorial(Iplus1,Iplus1F)))) ). 

for(N,I,S,F,G) :- 
	assert(counter(N,S)), 
	repeat, 
	retract(counter(N,X)), 
	( X > F, !;
	    snips( (I = X, 
		       call(G), 
		       I1 is I + 1, 
		       assert(counter(N,I1)) )),
	    fail ). 

snips(X) :- call(X), !.

drawnumberofbins(N,K) :-
	statno(N,S),
	repeat,
	random(S,P), 
	bin(0,P,1,K,N).

bin(S,P,C,C,N) :-
	stackno(N,C,T),
	S1 is S + T,
	P < S1, 
	!.
bin(S,P,C,K,N) :-
	stackno(N,C,T),
	S1 is S + T,
	C1 is C + 1,
	bin(S1,P,C1,K,N).

stackno(1,1,1).
stackno( 2 ,1, 2 ).
stackno( 2 , 2 ,1).
stackno( 3 ,1, 6 ).
stackno( 3 , 3 ,1).
stackno( 4 ,1, 24 ).
stackno( 4 , 4 ,1).
stackno( 5 ,1, 120 ).
stackno( 5 , 5 ,1).
stackno( 6 ,1, 720 ).
stackno( 6 , 6 ,1).
stackno( 7 ,1, 5040 ).
stackno( 7 , 7 ,1).
stackno( 8 ,1, 40320 ).
stackno( 8 , 8 ,1).
stackno( 9 ,1, 362880 ).
stackno( 9 , 9 ,1).
stackno( 10 ,1, 3628800 ).
stackno( 10 , 10 ,1).
stackno( 3 , 2 , 6 ).
stackno( 4 , 2 , 36 ).
stackno( 4 , 3 , 12 ).
stackno( 5 , 2 , 240 ).
stackno( 5 , 3 , 120 ).
stackno( 5 , 4 , 20 ).
stackno( 6 , 2 , 1800 ).
stackno( 6 , 3 , 1200 ).
stackno( 6 , 4 , 300 ).
stackno( 6 , 5 , 30 ).
stackno( 7 , 2 , 15120 ).
stackno( 7 , 3 , 12600 ).
stackno( 7 , 4 , 4200 ).
stackno( 7 , 5 , 630 ).
stackno( 7 , 6 , 42 ).
stackno( 8 , 2 , 141120 ).
stackno( 8 , 3 , 141120 ).
stackno( 8 , 4 , 58800 ).
stackno( 8 , 5 , 11760 ).
stackno( 8 , 6 , 1176 ).
stackno( 8 , 7 , 56 ).
stackno( 9 , 2 , 1451520 ).
stackno( 9 , 3 , 1693440 ).
stackno( 9 , 4 , 846720 ).
stackno( 9 , 5 , 211680 ).
stackno( 9 , 6 , 28224 ).
stackno( 9 , 7 , 2016 ).
stackno( 9 , 8 , 72 ).
stackno( 10 , 2 , 16329600 ).
stackno( 10 , 3 , 21772800 ).
stackno( 10 , 4 , 12700800 ).
stackno( 10 , 5 , 3810240 ).
stackno( 10 , 6 , 635040 ).
stackno( 10 , 7 , 60480 ).
stackno( 10 , 8 , 3240 ).
stackno( 10 , 9 , 90 ).
statno( 1 , 1 ).
statno( 2 , 3 ).
statno( 3 , 13 ).
statno( 4 , 73 ).
statno( 5 , 501 ).
statno( 6 , 4051 ).
statno( 7 , 37633 ).
statno( 8 , 394353 ).
statno( 9 , 4596553 ).
statno( 10 , 58941091 ).




% -------------------------------------






blocks_dist_1(X,Y,D) :-
	retrieve_val(blocks_dist,DistID),
	blocks_distance_compute(DistID,X,Y,D).

init_rib_dist :-
	new_c_object(blocks_distance,DistID),
	assign_val(blocks_dist,DistID),
	write('Blocks distance ID= '),write(DistID),nl,!,
	Dist=blocks_dist_1,
	DistCall=..[Dist,X,Y,D],
	set_setting(rib_distance,(X,Y,D,DistCall)),
	write('using distance function '),write(Dist),nl,!.
init_rib_dist :-
	write('failed to init rib dist\n').

:- init_rib_dist.




rrl_env_allStates([]).
rrl_env_qvalue(_,_,0).
