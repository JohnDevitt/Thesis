

@node Introduction, next,  previous,  up
@comment node-name, next,  previous,  up
@chapter Introduction

 
@glindex xsbdoc
@code{xsbdoc} is an @emph{automatic program documentation generator} for XSB applications and modules. Based originally on the Ciao system's 
@glindex lpdoc
@code{lpdoc} [BibRef: ciao-man], 
@glindex xsbdoc
@code{xsbdoc} generates a reference manual automatically from one or more XSB source files. The target format of the documentation can be Postscript, HTML, PDF, or nicely formatted ASCII text. 
@glindex xsbdoc
@code{xsbdoc} can be used to automatically generates a description of full applications, library modules, README files, etc. A fundamental advantage of using 
@glindex xsbdoc
@code{xsbdoc} to document programs is that it is much easier to maintain a true correspondence between the program and its documentation, and to identify precisely to what version of the program a given printed manual corresponds. Naturally, the 
@glindex xsbdoc
@code{xsbdoc} manual generated by 
@glindex xsbdoc
@code{xsbdoc} itself. 



@node Overview of this document, next,  previous,  up
@comment node-name, next,  previous,  up
@section Overview of this document 

This first part of the document provides basic explanations on how to generate a manual from a set of files that already contain 
@glindex assertions
assertions and 
@glindex comments
comments. Examples are given using the files in the @code{doc} directory that generate this manual. These instructions assume that 
@glindex xsbdoc
@code{xsbdoc} is installed as an XSB package. 

Other parts of this document provide: 


@itemize @bullet{} 


@item Documentation on the 
@glindex formatting commands
formatting commands that can be embedded in @emph{comments}. 


@item Documentation on the @emph{assertions} that 
@glindex xsbdoc
@code{xsbdoc} uses (those defined in the 
@glindex XSB
@code{XSB} 
@glindex assertions
@code{assertions} library. 


@end itemize  



All of the above have been generated automatically from the comments and assertions in the corresponding sources and can also be seen as examples of the use of 
@glindex xsbdoc
@code{xsbdoc}. 



@node  xsbdoc operation - source and target files, next,  previous,  up
@comment node-name, next,  previous,  up
@section  xsbdoc operation - source and target files 

The main input used by 
@glindex xsbdoc
@code{xsbdoc} in order to generate a manual are 
@glindex Prolog source files
Prolog source files. Basically, 
@glindex xsbdoc
@code{xsbdoc} generates a file in the GNU 
@glindex texinfo
@code{texinfo} format (with a @code{.texi} ending) for each 
@glindex Prolog
@code{Prolog} file (see ``The GNU Texinfo Documentation System'' manual for more info on this format). Using these @code{texi} files, 
@glindex xsbdoc
@code{xsbdoc} calls various applications to generate Postscript, PDF, HTML, or ASCII output. 

The 
@glindex Prolog
@code{Prolog} files must have a @code{.P} ending, although information is also taken from files ending in @code{.H} if the corresponding @code{.P} file is present. Depending on declarations from the 
@glindex format file
format file used to generate the documentation, a given file may be documented as a 
@glindex library
library or as an 
@glindex application
application. In the first case, the @code{.texi} file generated for it will contain information on the interface (e.g., the predicates exported and imported by the file, etc.). In the second case, if it is an application, no no description of the interface will be generated 

If needed, 
@coindex texinfo files
@glindex texinfo files 
files written directly in 
@glindex texinfo
@code{texinfo} can also be used as input files for 
@glindex xsbdoc
@code{xsbdoc}. These files @emph{must have a} @code{.src} @emph{(instead of a} @code{.texi} @emph{) ending}. This is needed to distinguish them from any automatically generated @code{.texi} files. Writing files directly in 
@glindex texinfo
@code{texinfo} has the disadvantage that it may be difficult to adhere to all the conventions used by 
@glindex xsbdoc
@code{xsbdoc}. For example, these files will be typically used as chapters and must be written as such. Also, the set of indices used must be the same as specified in the 
@glindex xsbdoc
@code{xsbdoc} format file for the application. Finally, no bibliographic citations can be used in @code{.src} files. Because of this, and because in the future 
@glindex xsbdoc
@code{xsbdoc} may be able to generate documentation in formats other than 
@glindex texinfo
@code{texinfo} directly (in which case these files would not be useful), writing files in 
@glindex texinfo
@code{texinfo} directly is discouraged. This facility was added mainly to be able to reuse parts of manuals which were already written in 
@glindex texinfo
@code{texinfo}. Note that if a stand-alone file needs to be written (i.e., a piece of documentation that is not associated to any @code{.P} file) it can always be written as a ``dummy'' @code{.P} file (i.e., one that is not used as code), but which contains machine readable comments). 



@node Documenting Libraries and/or Applications, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Documenting Libraries and/or Applications 

A manual can be generated either from a single source file (@code{.P} or @code{.src}) or from a set of source files. In the latter case, then one of these files should be chosen to be the 
@coindex main file
@glindex main file
@emph{main file}, and the others will be the 
@coindex component files
@glindex component files
@emph{component files}. The main file is the one that will provide the title, author, date, summary, etc. to the entire document. In principle, any set of source files can be documented, even if they contain no assertions or comments. However, the presence of assertions or comments will greatly improve the documentation (see @ref{Enhancing the documentation being generated}). 

If the manual is generated from a single main file (i.e., there are no component files) then a flat document containing no chapters will be generated. If the manual is generated from a main file and one or more components, then the document will contain chapters. The comments in the main file will be used to generate the introduction, while each of the component files will be used to generate a separate chapter. The contents of each chapter will be controlled by the contents of the corresponding component file. 





@node Generating a manual, next,  previous,  up
@comment node-name, next,  previous,  up
@section Generating a manual 

To use 
@glindex xsbdoc
@code{xsbdoc}, the package must be first loaded via the command 


@smallexample 
         [xsbdoc].
@end smallexample  

The top-level command to generate documentation is 


@smallexample 
?- xsbdoc(FormatFile,GenerationType).
@end smallexample  

Where @code{FormatFile} is a file specifying input files and formatting options to use, while @code{GenerationType} is specifies the graphical format to use: postscript, html, etc. We consider each of the arguments in turn. 



@node The Format File, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection The Format File 

The 
@glindex doc
@code{doc} library directory includes the @emph{format file} @code{'xsbdoc_format.P'} used to generate this manual, and which can be used as a example of how to generate other manuals. Typically, the format file is put into a separate directory (say a subdirectory) from the code that it documents, and relative or absolute paths to the main file and the components are given so that they can be accessed. The main file to be used is indicated by the predicate 
@glindex xsbdoc_main/1
@code{xsbdoc_main/1}, while component files are indicated by the predicate 
@glindex xsbdoc_component/1
@code{xsbdoc_component/1} and are documented in the order in which they occur in the format file. For instance, in @code{'xsbdoc_format.P'}, the main file is indicated by the fact: 


@smallexample 
xsbdoc_main('../xsbdoc1.P').
@end smallexample  

while the two chapters are indicated by the facts 


@smallexample 
xsbdoc_component('comments.P').
xsbdoc_component('assertions_props.P').
@end smallexample  


@glindex xsbdoc
@code{xsbdoc} uses as default directory search paths whatever directories have been asserted via the XSB predicate 
@glindex library_directory/1
@code{library_directory/1} (See the XSB manual for more details). 

Finally, if there are any citations in the manual, any bibtex files will have to be indicated through 
@glindex xsbdoc_bibfile/1
@code{xsbdoc_bibfile/1}. All the references will appear together in a @emph{References} appendix at the end of the manual. If you are not using citations, then add the fact @code{xsbdoc_option('-norefs')} in the format file, which will prevent an empty 'References' appendix from appearing in the manual. 



@node Miscellaneous options, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Miscellaneous options 

Like 
@glindex lpdoc
@code{lpdoc}, 
@glindex xsbdoc
@code{xsbdoc} can use default settings for many of the other options. However, if you wish to control the behavior of 
@glindex xsbdoc
@code{xsbdoc}, you can do so through an array of options. 


@itemize @bullet{} 


@item Options that don't require parameters are indicated through 
@glindex xsbdoc_option/1
@code{xsbdoc_option/1} facts. 
@glindex xsbdoc_option/1
@code{xsbdoc_option/1} facts can be used to configure whether various pieces of information are included or not, along with many particulars of how the generated documentation looks. None of these options were used in generating this manual. The current set of values for 
@glindex xsbdoc_option/1
@code{xsbdoc_option/1} are: 


@table @asis 


@item @code{xsbdoc_option('-noauthors')} 

Omits all author names. 


@item @code{xsbdoc_option('-twosided')} Formats 

the documentation for printing on two-sided paper by starting each chapter and appendix on an odd-numbered page. 


@item @code{xsbdoc_option('-shorttoc')} 

Produces a shorter table of contents that does not include entries for definitions of individual predicates. 


@item @code{xsbdoc_option('-noversion')} 

Omits version information from various places in the manual --- such as the title page and summary. 


@item @code{xsbdoc_option('-nosysmods')} 

Does not include system modules (defined as subdirectories of the root XSB directory) in list of libraries used for modules. 


@item @code{xsbdoc_option('-nochangelog')} 

Does not include a change log at the end of a chapter (cf. @ref{Version/Change Log (xsbdoc1)}). 


@item @code{xsbdoc_option('-nopatches')} 

Does not include comments for patches within the change log (i.e. only major & minor revisions are included) 


@item @code{xsbdoc_option('-nobugs')} 

Does not include information on known bugs and planned improvements (cf. @ref{Known bugs and planned improvements (xsbdoc1)}). 


@item @code{xsbdoc_option('-norefs')} 

Omits a @emph{References} section regardless of whether citations are present. 


@item @code{xsbdoc_option('-nopropsepln')} 

Does not put each property in a separate line when @code{pred/1} assertions are commented for individual predicates (cf. the assertions for @code{comment/2} in @ref{Documentation on exports (comments)}). 


@item @code{xsbdoc_option('-nopropnames')} 

Do not include property names when @code{pred/1} assertions are commented for individual predicates (cf. the assertions for @code{comment/2} in @ref{Documentation on exports (comments)}). 


@item @code{xsbdoc_option('-v')} 

Generates verbose output and can be useful for debugging document speficications. 


@end table  


@item Facts of the form 
@glindex xsbdoc_index/1
@code{xsbdoc_index/1} determine the list of indices to be included at the end of the document. These can include indices for defined predicates, modules, concepts, etc. 


@table @asis 


@item @code{xsbdoc_index(pred)} 

Index of defined predicates. 


@item @code{xsbdoc_index(op)} 

Index of defined operators. 


@item @code{xsbdoc_index(concept)} 

Index of cited and defined concepts. 


@item @code{xsbdoc_index(global)} 

Global index of cited and defined predicates, operators, libraries, applications, concepts, etc. 


@item @code{xsbdoc_index(all)} 

Includes all currently defined indices. @emph{Limitations in the number of simultaneous indices} in some texinfo installations may occasionally prevent this option from working. 


@end table  
 
@coindex page numbering, changing
@glindex page numbering, changing 


@item The predicate 
@glindex xsbdoc_startpage/1
@code{xsbdoc_startpage/1} changes the page number of the first page of the manual. This can be useful if the manual is to be included in a larger document or set of manuals. Typically, this should be an @emph{odd} number. The default number is @code{1}. 


@coindex page size, changing
@glindex page size, changing 
@coindex page style, changing
@glindex page style, changing 


@item 
@glindex xsbdoc_papertype/1
@code{xsbdoc_papertype/1} allows selection between several paper sizes for the printable outputs (@code{dvi}, @code{ps}, etc.). The currently supported outputs (most of them inherited from 
@glindex texinfo
@code{texinfo}) are: 


@table @asis 


@item @code{afourpaper} 

The default, usable for printing on 
@coindex A4 paper
@glindex A4 paper
@emph{A4 paper}. Rather busy, but saves trees. 


@item @code{afourwide} 

This one crams even more stuff than @code{afourpaper} on an A4 page. Useful for generating manuals in the least amount of space. Saves more trees. 


@item @code{afourlatex} 

This one is a little less compressed than @code{afourpaper}. 


@item @code{smallbook} 

Small pages, like in a handbook. 


@item @code{letterpaper} 

For printing on American 
@coindex letter size paper
@glindex letter size paper
@emph{letter size paper}. 


@item @code{afourthesis} 

A 
@coindex thesis-like style
@glindex thesis-like style
@emph{thesis-like style} (i.e., double spaced, wide margins etc.). Useful -- for inserting 
@glindex xsbdoc
@code{xsbdoc} output as appendices of a thesis or similar document. Does not save trees. 


@end table  

The default paper type is @code{letterpaper}. 


@end itemize  



@node Graphical Formatting, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Graphical Formatting 

The second argument of 
@glindex xsbdoc/2
@code{xsbdoc/2} indicates the target graphical format. Use of all options depends on having 
@glindex tex
@code{tex} installed on your system. 

The current options are: 


@itemize @bullet{} 


@item @code{dvi}, which generates a dvi format file, viewable by 
@glindex xdvi
@code{xdvi}, 
@glindex yap
@code{yap} and other viewers. 


@item @code{ps} which generates a viewable and printable postscript file. Use of this option depends on having 
@glindex dvips
@code{dvips} installed on your machine. 


@item @code{pdf} which generates a viewable and printable postscript file. Use of this option depends on having 
@glindex dvips
@code{dvips} and 
@glindex ps2pdf
@code{ps2pdf} installed on your machine. 


@item @code{html} which generates html files in a subdirectory of the current working directory. The directory is named @code{<Main>_html} where @code{Main} is the base name of the file (i.e. the filename without a directory path or extension) specified by the fact 
@glindex xsbdoc_main/1
@code{xsbdoc_main/1} in the format file. Use of this option depends on having 
@glindex texi2html
@code{texi2html} installed on your machine. 


@item @code{ascii} which generates ascii files which are surprisingly nicely formatted to denote chapter and section headings, indices, and so on. Use of this option depends on having 
@glindex makeinfo
@code{makeinfo} installed on your machine. 


@end itemize  

Future versions will probably also include support for generating @code{rtf} files. 



@node Enhancing the documentation being generated, next,  previous,  up
@comment node-name, next,  previous,  up
@section Enhancing the documentation being generated 

The quality of the documentation generated can be greatly enhanced by including within the program text: 


@itemize @bullet{} 


@item @strong{Import/Export Information}. 
@glindex xsbdoc
@code{xsbdoc} uses information on exported and imported predicates in order to document the interface of a module. Because some users consider the XSB module system is awkward to use while developing code, 
@glindex xsbdoc
@code{xsbdoc} also recognizes the directives 


@itemize @bullet{} 


@item 
@glindex document_export/1
@code{document_export/1}, and 


@item 
@glindex document_import/1
@code{document_import/1} 


@end itemize  

which are treated by 
@glindex xsbdoc
@code{xsbdoc} exactly as 
@glindex export/1
@code{export/1} and 
@glindex import/1
@code{import/1}, but which are ignored by the XSB compiler. 

In principle, only the (document_)exported predicates are documented, although any predicate can be included in the documentation by explicitly requesting it (see the documentation for the 
@glindex comment/2
@code{comment/2} declaration). 


@item @strong{Assertions} are directives that are included in the source program and provide the compiler with information regarding characteristics of the program. Typical assertions include standard compiler directives (such as 
@glindex dynamic/1
@code{dynamic/1}, 
@glindex op/3
@code{op/3}, 
@glindex use_variant_tabling/1
@code{use_variant_tabling/1}...), etc. However, the 
@glindex pred/2
@code{pred/2} assertion can also be used to declare global, call, and success types and modes (see @ref{The XSB Assertion Library}). 

When documenting a module, 
@glindex xsbdoc
@code{xsbdoc} will use the assertions associated with the module interface to construct a textual description of this interface. Judicious use of these assertions combines documentation of the program with improved debugging behavior. Improvement in debugging is possible because some assertions provide information on the intended meaning or behaviour of the program (i.e., the specification) which can be checked at compile-time (by a suitable preprocessor/static analyzer) and/or at run-time (via checks inserted by a preprocessor). (TLS: this portion is still under development for XSB). 


@item @strong{Machine-readable comments} are also declarations included in the source program but which contain additional information intended to be read by humans (i.e., this is an instantiation of the 
@coindex literate programming
@glindex literate programming
@emph{literate programming} style of Knuth [BibRef: knuth-lit]). In addition to predicate-level comments, typical comments include title, author(s), bbugs, changelog, etc. 


@end itemize  



@node Other Usage Information, next,  previous,  up
@comment node-name, next,  previous,  up
@section Other Usage Information 





@node Separating the documentation from the source file, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Separating the documentation from the source file 

Sometimes it is convenient to include long introductory comments in a separate file from a source code file. This can be by using the @@include command. For example, the declaration: 


@smallexample 
:- comment(module,""@@include@{Intro.xsbdoc@}"").
@end smallexample  


@noindent
includes the contents of the file @code{Intro.xsbdoc} as the module description. 

Alternatively, sometimes it may be convenient to generate the documentation from a completely different file. Assuming that the original module is @code{m1.P}, documentation can be kept in @code{m1_doc.P}, and included as a component in the format file. 
@glindex xsbdoc
@code{xsbdoc} recognizes and treats such @code{_doc} files specially so that the name without the @code{_doc} part is used in various parts of the documentation, in the same way as if the documentation were placed in file @code{m1}. 

Finally, there are several other mechanisms of including image files, predicate definitions and so on in machine readable comments, as is explained in @ref{Enhancing Documentation with Machine-Readable Comments}. 



@node Writing comments to document version/patch changes, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Writing comments to document version/patch changes 

Version comments (@code{:- comment(version(...), ""..."").}) can provide useful documentation on how a given library or application has been changed or has evolved. Sometimes one would like to write version comments that are internal, i.e., not meant to appear in the manual. This can, of course be done with standard Prolog comments (which 
@glindex xsbdoc
@code{xsbdoc} will not read). An alternative and quite useful solution is to put such internal comments in @emph{patch} changes (e.g., 1.1#2 to 1.1#3), and put the more general comments, which describe major changes to the user and should appear in the manual, in @emph{version} changes (e.g., 1.1#2 to 1.2#0). Selecting the appropriate options in 
@glindex xsbdoc
@code{xsbdoc} then allows including in the manual the version changes but not the patch changes (which might on the other hand be included in an 
@coindex internals manual
@glindex internals manual
@emph{internals manual}). 



@node Cleaning up the documentation directory, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Cleaning up the documentation directory 

Typing the command: 
@smallexample 
?- make_distclean.
@end smallexample  
deletes all intermediate files and the generated @code{.texic} files, leaving only the targets (i.e., the @code{.ps}, @code{.dvi}, @code{.ascii}, @code{.html}, etc. files). This is the option normally used when building software distributions in which the manuals come ready made in the distribution itself and will not need to be generated during installation. 



@node Ensuring Compatibility with All Supported Target Formats, next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Ensuring Compatibility with All Supported Target Formats 


@glindex xsbdoc
@code{xsbdoc} allows manuals to be generated in several different formats. Because these formats each have widely different requirements it is sometimes a little tricky to get things to work successfully for all formats. The following recommendations may help: 


@itemize @bullet{} 




@item The GNU info format requires all @emph{nodes} (chapters, sections, etc.) to have different names. This is ensured by 
@glindex xsbdoc
@code{xsbdoc} for the automatically generated sections (by appending the module or file name to all section headings). However, care must be taken when writing section names manually to make them different. For example, use ``xsbdoc usage'' instead of simply ``Usage'', which is much more likely to be used as a section name in another file being documented. 


@item Also due to a limitation of the 
@glindex info
@code{info} format, (used in generating formatted ASCII files) do not use @code{:} or @code{,} or @code{-}@code{-} in section, chapter, etc. headings. 


@item The character ``@code{_}'' in names may sometimes give problems in indices, since current versions of 
@glindex texinfo
@code{texinfo} do not always handle it correctly. 


@end itemize  





@node Generating auxiliary files (e.g., READMEs), next,  previous,  up
@comment node-name, next,  previous,  up
@subsection Generating auxiliary files (e.g., READMEs) 

Using 
@glindex xsbdoc
@code{xsbdoc} it is often possible to use a common source for documentation which should appear in several places. For example, if a file 
@glindex INSTALL.xsbdoc
@code{INSTALL.xsbdoc} contains text (with @code{xsbdoc} formatting commands) describing an application. This text can be included in a section of the main file documentation as described above: 


@smallexample 
:- comment(module,""
   ...
   @@section@{Installation instructions@}
   @@include@{INSTALL.xsbdoc@}
   ...
   "").
@end smallexample  


@noindent
At the same time, this text can be used to generate a nicely formatted @code{INSTALL} file in ascii. To this end, an @code{INSTALL.P} file as follows can be constructed: 


@smallexample 
:- comment(title,""Installation instructions"").
:- comment(module,""@@include@{INSTALL.xsbdoc@}"").
@end smallexample  

Then, the ascii @code{INSTALL} file can be generated by simply running @code{xsbdoc(format,ascii)} using a file @code{format.P} with the fact @code{xsbdoc_main('INSTALL')}. 



@node Troubleshooting, next,  previous,  up
@comment node-name, next,  previous,  up
@section Troubleshooting 

These are some common errors which may be found using 
@glindex xsbdoc
@code{xsbdoc} and the usual fix: 


@itemize @bullet{} 


@item Messages of the type: 
@smallexample 

 ! No room for a new @@write .

@end smallexample  
while converting from @code{.texi} to @code{.dvi} (i.e., while running 
@glindex tex
@code{tex}). These messages are 
@glindex tex
@code{tex}'s way of saying that an internal area (typically for an index) is full. This is normally because more indices were selected in the @code{INDICES} variable of the @code{SETTINGS} file than the maximum number supported by the installed version of 
@glindex tex
@code{tex}/
@glindex texinfo
@code{texinfo} installations, as mentioned in @ref{Generating a manual}. The easiest fix is to reduce the number of indices generated. Alternatively, it may be possible to recompile your local 
@glindex tex
@code{tex}/
@glindex texinfo
@code{texinfo} installation with a higher number of indices. 


@item Missing links in 
@glindex info
@code{info} files (a section which exists in the printed document cannot be accessed in the on-line document) can be due to the presence of a colon (@code{:}), a comma (@code{,}), a double dash (@code{--}), or other such separators in a section name. Due to limitations of 
@glindex info
@code{info} section names cannot contain these symbols. 


@item Menu listings in 
@glindex info
@code{info} which @emph{do not work} (i.e., the menu listings are there, but they cannot be followed): see if they are indented. In that case it is due to an @code{itemize} or @code{enumerate} which was not closed. 


@end itemize  






@node Known bugs and planned improvements (xsbdoc1), next,  previous,  up
@comment node-name, next,  previous,  up
@section Known bugs and planned improvements (@code{xsbdoc1})

@itemize @bullet{}

@item
Variable names are not propagated in head patterns of :- pred assertions..

@item
load_dyn/1, load_dync/1 directives should be doc'd at interface of module

@item
Special indexing directives (e.g. tries) are not documented in predicate level documentation. Other directives may also be added to documentation

@item
Have not tested out _doc files; that more than one bibfile can be used; that image files are appropriately read.
@end itemize


@node Version/Change Log (xsbdoc1), next,  previous,  up
@comment node-name, next,  previous,  up
@section Version/Change Log (@code{xsbdoc1})

@table @strong

@item Version 0.1#1 (2001 / 11 / 1)
Celebrating the first version with a brand-new comment!
@end table
