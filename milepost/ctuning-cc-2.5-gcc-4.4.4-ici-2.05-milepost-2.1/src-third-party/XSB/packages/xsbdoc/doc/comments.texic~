

@node Enhancing Documentation with Machine-Readable Comments, next,  previous,  up
@comment node-name, next,  previous,  up
@chapter Enhancing Documentation with Machine-Readable Comments
@c -------------------------------------------------
@c WARNING: Do not edit this file (comments.texic)
@c It has been generated automatically from file:  
@c comments.P
@c -------------------------------------------------

@strong{Author(s):} Manuel Hermenegildo.


This defines the admissible uses of the 
@glindex comment/2
@code{comment/2} declaration (which is used mainly for adding 
@glindex machine readable comments
machine readable comments to programs), the 
@glindex formatting commands
formatting commands which can be used in the text strings inside these comments, and some related properties and data types. These declarations are ignored by the compiler in the same way as classical comments. Thus, they can be used to document the program source in place of (or in combination with) the normal comments typically inserted in the code by programmers. However, because they are more structured and they are machine-readable, they can also be used to generate printed or on-line documentation automatically, using the 
@glindex lpdoc
@code{lpdoc} automatic documentation generator. These 
@coindex textual comments
@glindex textual comments
@emph{textual comments} are meant to be complementary to the formal statements present in 
@coindex assertions
@glindex assertions
@emph{assertions} (see the 
@glindex assertions
@code{assertions} library). 





@node Usage and interface (comments), next,  previous,  up
@comment node-name, next,  previous,  up
@section Usage and interface (@code{comments})
@cartouche
@itemize @bullet{}

@item @strong{Library usage:}

It is not necessary to use this library in user programs. Recognition of comments is handled automatically by xsbdoc and the XSB compiler. 

@item @strong{Exports:}
@itemize @minus


@item @emph{Predicates:}

@glindex comment/2
@code{comment/2}, 
@glindex docstring/1
@code{docstring/1}, 
@glindex stringcommand/1
@code{stringcommand/1}, 
@glindex version_descriptor/1
@code{version_descriptor/1}.


@end itemize

@end itemize
@end cartouche


@node Documentation on exports (comments), next,  previous,  up
@comment node-name, next,  previous,  up
@section Documentation on exports (@code{comments})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{comment / 2 (pred)}}}
@temp
@end iftex
@pdindex comment/2 
@glindex comment/2 
@deffn PREDICATE comment/2:



This declaration provides one of the main means for adding 
@coindex machine readable comments
@glindex machine readable comments
@emph{machine readable comments} to programs (the other one is adding 
@coindex documentation strings
@glindex documentation strings
@emph{documentation strings} to assertions).


@strong{Usage 1:} @code{comment(title,TitleText)}
@itemize @minus
@item @emph{Description:} Provides a 
@coindex title
@glindex title
@emph{title} for the library or application. When generating documentation automatically, the text in @code{TitleText} will be used appropriately (e.g., in the cover page as document title or as chapter title if part of a larger document). This will also be used as a brief description of the manual in tables of content, etc. There should be at most one of these declarations per module. 


@item @emph{Example:} 
@smallexample 
:- comment(title,"Documentation-Oriented Assertions").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(TitleText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 2:} @code{comment(subtitle,SubTitleText)}
@itemize @minus
@item @emph{Description:} Provides 
@coindex subtitle
@glindex subtitle
@emph{subtitle} lines. This can be, e.g., an explanation of the application to add to the title, the address of the author(s) of the application, etc. Several of these declarations can appear per module, which is useful for, say, multiple line addresses. 


@item @emph{Example:} 
@smallexample 
:- comment(subtitle,"A Reference Manual").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(SubTitleText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 3:} @code{comment(author,AuthorText)}
@itemize @minus
@item @emph{Description:} Specifies the 
@coindex author
@glindex author
@emph{author}(s) of the module or application. If present, the text in @code{AuthorText} will be placed in the corresponding chapter or front page. There can be more than one of these declarations per module. In order for 
@glindex author indexing
author indexing to work properly, please use one author declaration per author. If more explanation is needed (who did what when, etc.) use an acknowledgements or subtitle comment. 


@item @emph{Example:} 
@smallexample 
:- comment(author,"Alan Robinson").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(AuthorText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 4:} @code{comment(ack,AckText)}
@itemize @minus
@item @emph{Description:} Provides 
@coindex acknowledgements
@glindex acknowledgements
@emph{acknowledgements} for the module. If present, the text in @code{AckText} will be placed in the corresponding chapter or section. There can be only one of these declarations per module. 


@item @emph{Example:} 
@smallexample 
:- comment(ack,"Module was written by Alan, but others helped.").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(AckText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 5:} @code{comment(copyright,CopyrightText)}
@itemize @minus
@item @emph{Description:} Provides a 
@coindex copyright
@glindex copyright
@emph{copyright} text. This normally appears somewhere towards the beginning of a printed manual. There should be at most one of these declarations per module. 


@item @emph{Example:} 
@smallexample 
:- comment(copyright,"Copyright @copyright{} 2001 FSF.").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CopyrightText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 6:} @code{comment(summary,SummaryText)}
@itemize @minus
@item @emph{Description:} Provides a brief global explanation of the application or library. The text in @code{SummaryText} will be used as the 
@coindex abstract
@glindex abstract
@emph{abstract} for the whole manual. There should be at most one of these declarations per module. 


@item @emph{Example:} 
@smallexample 
:- comment(summary,"This is a @@bf@{very@} important library.").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(SummaryText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 7:} @code{comment(module,CommentText)}
@itemize @minus
@item @emph{Description:} Provides the main comment text for the module or application. Tthe text in @code{CommentText} will be used as the 
@coindex introduction
@glindex introduction
@emph{introduction} or 
@coindex main body
@glindex main body
@emph{main body} 
@coindex module comment
@glindex module comment 
of the corresponding chapter or manual. There should be at most one of these declarations per module. @code{CommentText} may use subsections if substructure is needed. 


@item @emph{Example:} 
@smallexample 
:- comment(module,"This module is the @@lib@{comments@} library."). 
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 8:} @code{comment(appendix,CommentText)}
@itemize @minus
@item @emph{Description:} Provides additional comments text for a module or application. The text in @code{CommentText} will be used in one of the last sections or appendices 
@coindex appendix
@glindex appendix 
of the corresponding chapter or manual. There should be at most one of these declarations per module. @code{CommentText} may use subsections if substructure is needed. 


@item @emph{Example:} 
@smallexample 
:- comment(appendix,"Other module functionality..."). 
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 9:} @code{comment(usage,CommentText)}
@itemize @minus
@item @emph{Description:} Provides a description of how the library should be loaded. Normally, this information is gathered automatically when generating documentation automatically. This declaration is meant for use when the module needs to be treated in some special way. There should be at most one of these declarations per module. 


@item @emph{Example:} 
@smallexample 
:- comment(usage,"Do not use: still in development!"). 
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 10:} @code{comment(PredName,CommentText)}
@itemize @minus
@item @emph{Description:} Provides an introductory comment for a given predicate, function, property, type, etc., denoted by @code{PredName}. The text in @code{Text} will be used as the introduction of the corresponding predicate/function/... description. There should be at most one of these declarations per predicate, function, property, or type. 


@item @emph{Example:} 
@smallexample 
:- comment(comment/2,"This declaration provides one of the main 
   means for adding @@concept@{machine readable comments@} to 
   programs."). 
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 11:} @code{comment(bug,CommentText)}
@itemize @minus
@item @emph{Description:} Documents a known 
@coindex bug
@glindex bug
@emph{bug} or 
@coindex planned improvement
@glindex planned improvement
@emph{planned improvement} in the module or application. Several of these declarations can appear per module. When generating documentation automatically, the text in the @code{Text} fields will be used as items in an itemized list of module or application bugs. 


@item @emph{Example:} 
@smallexample 
:- comment(bug,"Comment text still has to be written by user.").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 12:} @code{comment(Version,CommentText)}
@itemize @minus
@item @emph{Description:} Provides a means for keeping a 
@coindex log of changes
@glindex log of changes
@emph{log of changes}. @code{Version} contains the 
@coindex version number
@glindex version number
@emph{version number} and date corresponding to the change and @code{CommentText} an explanation of the change. Several of these declarations can appear per module. When generating documentation automatically, the texts in the different @code{CommentText} fields typically appear as items in an itemized list of changes. The 
@glindex emacs CIAO mode
emacs CIAO mode helps tracking version numbers by prompting for version comments when files are saved. This mode requires version comments to appear in reverse chronological order (i.e., the topmost comment should be the most recent one). 


@item @emph{Example:} 
@smallexample 
:- comment(version(1*1+21,1998/04/18,15:05*01+'EST'), "Added some
   missing comments.  (Manuel Hermenegildo)").
@end smallexample  
 
@item @emph{The following properties hold upon exit:}


@code{version_descriptor(Version)}
@iftex
@hfill
@end iftex
 (undefined property)

@code{docstring(CommentText)}
@iftex
@hfill
@end iftex
 (undefined property)
@end itemize

@strong{Usage 13:} @code{comment(doinclude,PredName)}
@itemize @minus
@item @emph{Description:} This usage provides control over which predicates are included in the documentation. Normally, only exported predicates are documented. A declaration @code{:- comment(doinclude,}@code{PredName}@code{).} forces documentation for predicate @code{PredName} to be included even if @code{PredName} is not exported (and is not included in a @code{document_export/1} statement). 


@item @emph{Example:} 
@smallexample 
:- comment(doinclude,p/3).
@end smallexample  
 
@end itemize

@strong{Usage 14:} @code{comment(doinclude,PredName)}
@itemize @minus
@item @emph{Description:} As above, but allows the second argument of @code{:- comment(doinclude,...)} to be a list of predicate names. 
@end itemize

@strong{Usage 15:} @code{comment(hide,PredName)}
@itemize @minus
@item @emph{Description:} This usage has an effect opposite to the previous usage: it signals that an exported predicate should @emph{not} be included in the documentation. 


@item @emph{Example:} 
@smallexample 
:- comment(hide,p/3).
@end smallexample  
 
@end itemize

@strong{Usage 16:} @code{comment(hide,PredName)}
@itemize @minus
@item @emph{Description:} A different usage which allows the second argument of @code{:- comment(hide,...)} to be a list of predicate names. 
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{docstring / 1 (pred)}}}
@temp
@end iftex
@pdindex docstring/1 
@glindex docstring/1 
@deffn PREDICATE docstring/1:



Defines the format of the character strings which can be used in machine readable comments (
@glindex comment/2
@code{comment/2} declarations) and assertions. These character strings can include certain 
@coindex formatting commands
@glindex formatting commands
@emph{formatting commands}. 


@itemize @bullet{} 


@item All printable characters are admissible in documentation strings except ``@code{@@}'', ``@code{@{},'' and ``@code{@}}''. To produce these characters the following 
@coindex escape sequences
@glindex escape sequences
@emph{escape sequences} should be used, respectively: @code{@@@@}, @code{@@@{}, and @code{@@@}}. 


@item In order to allow better formatting of on-line and printed manuals, in addition to normal text, certain formatting commands can be used within these strings. The syntax 
@coindex syntax of formatting commands
@glindex syntax of formatting commands 
of all these commands is: 

@code{@@}@emph{command} 

(followed by either a space or @code{@{@}}), or 

@code{@@}@emph{command}@code{@{}@emph{body}@code{@}} 

where @emph{command} is the command name and @emph{body} is the (possibly empty) command body. 

The set of commands currently admitted can be found in the documentation for the predicate 
@glindex stringcommand/1
@code{stringcommand/1}. 


@end itemize  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{stringcommand / 1 (pred)}}}
@temp
@end iftex
@pdindex stringcommand/1 
@glindex stringcommand/1 
@deffn PREDICATE stringcommand/1:



Defines the set of structures which can result from parsing a formatting command admissible in comment strings inside assertions. 

In order to make it possible to produce documentation in a wide variety of formats, the command set is kept small. The names of the commands are intended to be reminiscent of the commands used in the 
@glindex LaTeX
LaTeX text formatting system, except that ``@code{@@}'' is used instead of ``@code{\}.'' Note that @code{\} would need to be escaped in ISO-Prolog strings, which would make the source less readable (and, in any case, many ideas in LaTeX were taken from 
@glindex scribe
scribe, where the escape character was indeed @code{@@}!). 

The following are the currently admissible commands. 


@itemize @bullet{} 


@item @strong{Indexing commands:} 

The following commands are used to mark certain words or sentences in the text as concepts, names of predicates, libraries, files, etc. The use of these commands is highly recommended, since it results in very useful indices with little effort. 


@table @asis 


@item @code{@@index@{}@emph{text}@code{@}} 
@coindex @@index command
@glindex @@index command 
@emph{text} will be printed in an emphasized font and will be included in the concept definition index (and also in the usage index). This command should be used for the first or @emph{definitional} appearance(s) of a concept. The idea is that the concept definition index can be used to find the definition(s) of a concept. 


@item @code{@@cindex@{}@emph{text}@code{@}} 
@coindex @@cindex command
@glindex @@cindex command 
@emph{text} will be included in the concept index (and also in the usage index), but it is not printed. This is used in the same way as above, but allows sending to the index a different string than the one that is printed in the text. 


@item @code{@@concept@{}@emph{text}@code{@}} 
@coindex @@concept command
@glindex @@concept command 
@emph{text} will be printed (in a normal font). This command is used to mark that some text is a defined concept. In on-line manuals, a direct access to the corresponding concept definition may also be generated. A pointer to the place in which the @@concept command occurs will appear only in the usage index. 


@item @code{@@pred@{}@emph{predname}@code{@}} 
@coindex @@pred command
@glindex @@pred command 
@emph{predname} (which should be in functor/arity form) is the name of a predicate and will be printed in fixed-width, typewriter-like font. This command should be used when referring to a predicate (or a property or type) in a documentation string. A reference will be included in the usage index. In on-line manuals, a direct access to the corresponding predicate definition may also be generated. 


@item @code{@@op@{}@emph{operatorname}@code{@}} 
@coindex @@op command
@glindex @@op command 
@emph{operatorname} (which should be in functor/arity form) is the name of an operator and will be printed in fixed-width, typewriter-like font. This command should be used when referring to an operator in a documentation string. A reference will be included in the usage index. In on-line manuals, a direct access to the corresponding operator definition may also be generated. 


@item @code{@@lib@{}@emph{libname}@code{@}} 
@coindex @@lib command
@glindex @@lib command 
@emph{libname} is the name of a library and will be printed in fixed-width, typewriter-like font. This command should be used when referring to a module or library in a documentation string. A reference will be included in the usage index. In on-line manuals, a direct access to the corresponding module definition may also be generated. 


@item @code{@@apl@{}@emph{aplname}@code{@}} 
@coindex @@apl command
@glindex @@apl command 
@emph{aplname} is the name of an application and will be printed in fixed-width, typewriter-like font. This command should be used when referring to an application in a documentation string. A reference will be included in the usage index. 


@item @code{@@file@{}@emph{filename}@code{@}} 
@coindex @@file command
@glindex @@file command 
@emph{filename} is the name of a file and will be printed in fixed-width, typewriter-like font. This command should be used when referring to a file in a documentation string. A reference will be included in the usage index. 


@item @code{@@var@{}@emph{varname}@code{@}} 
@coindex @@var command
@glindex @@var command 
@emph{varname} is the name of a variable and will be formatted in an emphasized font. Note that when referring to variable names in a 
@glindex pred/1
@code{pred/1} declaration, such names should be enclosed in @code{@@var} commands for the automatic documentation system to work correctly. 


@end table  


@item @strong{Referencing commands:} 

The following commands are used to introduce 
@coindex bibliographic citations
@glindex bibliographic citations
@emph{bibliographic citations} and 
@coindex references
@glindex references
@emph{references} to 
@coindex sections
@glindex sections
@emph{sections}, 
@coindex urls
@glindex urls
@emph{urls}, 
@coindex email addresses
@glindex email addresses
@emph{email addresses}, etc. 


@table @asis 


@item @code{@@cite@{@emph{keyword}@}} 
@coindex @@cite command
@glindex @@cite command 
@emph{keyword} is the identifier of a 
@coindex bibliographic entry
@glindex bibliographic entry
@emph{bibliographic entry}. Such entry is assumed to reside in on of a number of 
@glindex bibtex
@code{bibtex} files (
@coindex .bib files
@glindex .bib files
@emph{.bib files}) 
@coindex bibtex
@glindex bibtex
. A reference in brackets (@strong{[ ]}) is inserted in the text an the full reference is included at the end, with all other references, in an appendix. For example, @code{@@cite@{iso-prolog@}} will introduce a citation to a bibliographic entry whose keyword is @code{iso-prolog}. The list of bibliography files which will be searched for a match is determined by the @code{BIBFILES} variable of the 
@glindex lpdoc
@code{lpdoc} 
@glindex SETTINGS
@code{SETTINGS} file. 


@item @code{@@ref@{@emph{section title}@}} 
@coindex @@ref command
@glindex @@ref command 
introduces at point a reference to the section or node @emph{section title}, where @emph{section title} must be the exact @emph{text} of the section title. 


@item @code{@@uref@{@emph{URL}@}} 
@coindex @@uref command
@glindex @@uref command 
introduces at point a reference to the 
@coindex Universal Resource Locator
@glindex Universal Resource Locator
@emph{Universal Resource Locator} (i.e., a 
@coindex WWW address
@glindex WWW address
@emph{WWW address} '
@coindex URL
@glindex URL
@emph{URL}'. 


@item @code{@@uref@{}@emph{text}@code{@}@{}@emph{URL}@code{@}} 
@coindex @@uref command
@glindex @@uref command 
introduces at point a reference to the 
@glindex Universal Resource Locator
Universal Resource Locator 
@glindex URL
URL, associated to the text @emph{text}. 


@item @code{@@email@{}@emph{address}@code{@}} 
@coindex @@email command
@glindex @@email command 
introduces at point a reference to 
@coindex email address
@glindex email address
@emph{email address} @emph{address}. 


@item @code{@@email@{}@emph{text}@code{@}@{}@emph{address}@code{@}} 
@coindex @@email command
@glindex @@email command 
introduces at point a reference to the 
@glindex email address
email address 
@glindex address
address, associated to the text @emph{text}. 


@end table  


@item @strong{Formatting commands:} 

The following commands are used to format certain words or sentences in a special font, build itemized lists, introduce sections, include examples, etc. 


@table @asis 


@item @code{@@comment@{}@emph{text}@code{@}} 
@coindex @@comment command
@glindex @@comment command 
@emph{text} will be treated as a 
@coindex comment
@glindex comment
@emph{comment} and will be ignored. 


@item @code{@@begin@{itemize@}} 
@coindex @@begin@{itemize@} command
@glindex @@begin@{itemize@} command 
marks the beginning of an 
@coindex itemized list
@glindex itemized list
@emph{itemized list}. Each item should be in a separate paragraph and preceded by an @code{@@item} command. 


@item @code{@@item} 
@coindex @@item command
@glindex @@item command 
marks the beginning of a new 
@coindex item in an itemized list
@glindex item in an itemized list
@emph{item in an itemized list}. 


@item @code{@@end@{itemize@}}
 
@coindex @@end@{itemize@} command
@glindex @@end@{itemize@} command 
marks the end of an itemized list. 


@item @code{@@begin@{enumerate@}} 
@coindex @@begin@{enumerate@} command
@glindex @@begin@{enumerate@} command 
marks the beginning of an 
@coindex enumerated list
@glindex enumerated list
@emph{enumerated list}. Each item should be in a separate paragraph and preceded by an @code{@@item} command. 


@item @code{@@end@{enumerate@}} 
@coindex @@end@{enumerate@} command
@glindex @@end@{enumerate@} command 
marks the end of an enumerated list. 


@item @code{@@begin@{description@}} 
@coindex @@begin@{description@} command
@glindex @@begin@{description@} command 
marks the beginning of a 
@coindex description list
@glindex description list
@emph{description list}, i.e., a list of items and their description (this list describing the different allowable commads is in fact a description list). Each item should be in a separate paragraph and contained in an @code{@@item@{}@emph{itemtext}@code{@}} command. 


@item @code{@@item@{}@emph{itemtext}@code{@}} 
@coindex @@item command
@glindex @@item command 
marks the beginning of a 
@coindex new item in description list
@glindex new item in description list
@emph{new item in description list}, and contains the header for the item. 


@item @code{@@end@{description@}} 
@coindex @@end@{description@} command
@glindex @@end@{description@} command 
marks the end of a description list. 


@item @code{@@begin@{verbatim@}} 
@coindex @@begin@{verbatim@} command
@glindex @@begin@{verbatim@} command 
marks the beginning of 
@coindex fixed format text
@glindex fixed format text
@emph{fixed format text}, 
@coindex verbatim text
@glindex verbatim text 
such as a program example. A fixed-width, typewriter-like font is used. 


@item @code{@@end@{verbatim@}} 
@coindex @@end@{verbatim@} command
@glindex @@end@{verbatim@} command 
marks the end of formatted text. 


@item @code{@@begin@{cartouche@}} 
@coindex @@begin@{cartouche@} command
@glindex @@begin@{cartouche@} command 
marks the beginning of a section of text in a 
@coindex framed box
@glindex framed box
@emph{framed box}, with round corners. 


@item @code{@@end@{cartouche@}} 
@coindex @@end@{cartouche@} command
@glindex @@end@{cartouche@} command 
marks the end of a section of text in a 
@glindex framed box
framed box. 


@item @code{@@section@{}@emph{text}@code{@}} 
@coindex @@section command
@glindex @@section command 
starts a 
@coindex section
@glindex section
@emph{section} whose title is @emph{text}. Due to a limitation of the 
@glindex info
@code{info} format, do not use @code{:} or @code{-} or @code{,} in section, subsection, title (chapter), etc. headings. 


@item @code{@@subsection@{}@emph{text}@code{@}} 
@coindex @@subsection command
@glindex @@subsection command 
starts a 
@coindex subsection
@glindex subsection
@emph{subsection} whose title is @emph{text}. 


@item @code{@@footnote@{}@emph{text}@code{@}} 
@coindex @@footnote command
@glindex @@footnote command 
places @emph{text} in a 
@coindex footnote
@glindex footnote
@emph{footnote}. 


@item @code{@@today} 
@coindex @@today command
@glindex @@today command 
prints the current 
@coindex date
@glindex date
@emph{date}. 


@item @code{@@hfill} 
@coindex @@hfill command
@glindex @@hfill command 
introduces horizontal filling space 
@coindex spcae, horizontal fill
@glindex spcae, horizontal fill 
(may be ignored in certain formats). 


@item @code{@@bf@{}@emph{text}@code{@}} 
@coindex @@bf command
@glindex @@bf command 
@emph{text} will be formatted in 
@coindex bold face
@glindex bold face
@emph{bold face} or any other 
@coindex strong face
@glindex strong face
@emph{strong face}. 


@item @code{@@em@{}@emph{text}@code{@}} 
@coindex @@em command
@glindex @@em command 
@emph{text} will be formatted in 
@coindex italics face
@glindex italics face
@emph{italics face} or any other 
@coindex emphasis face
@glindex emphasis face
@emph{emphasis face}. 


@item @code{@@tt@{}@emph{text}@code{@}} 
@coindex @@tt command
@glindex @@tt command 
@emph{text} will be formatted in a 
@coindex fixed-width font
@glindex fixed-width font
@emph{fixed-width font} (i.e., 
@coindex typewriter-like font
@glindex typewriter-like font
@emph{typewriter-like font}). 


@item @code{@@key@{}@emph{key}@code{@}} 
@coindex @@key command
@glindex @@key command 
@emph{key} is the identifier of a 
@coindex keyboard key
@glindex keyboard key
@emph{keyboard key} (i.e., a letter such as @code{a}, or a special key identifier such as @code{RET} or @code{DEL}) and will be formatted as @key{LFD} or in a fixed-width, typewriter-like font. 


@item @code{@@sp@{}@emph{N}@code{@}} 
@coindex @@sp command
@glindex @@sp command 
generates @emph{N} 
@coindex blank lines
@glindex blank lines
@emph{blank lines} of space. 
@coindex space, extra lines
@glindex space, extra lines 
Forces also a paragraph break. 


@item @code{@@p} 
@coindex @@p command
@glindex @@p command 
forces a 
@coindex paragraph break
@glindex paragraph break
@emph{paragraph break}, in the same way as leaving one or more blank lines. 


@item @code{@@noindent} 
@coindex @@noindent command
@glindex @@noindent command 
used at the beginning of a paragraph, states that the first line of the paragraph should not be indented. 
@coindex indentation, avoiding
@glindex indentation, avoiding 
Useful, for example, for 
@coindex avoiding indentation
@glindex avoiding indentation
@emph{avoiding indentation} on paragraphs that are continuations of other paragraphs, such as after a verbatim. 


@end table  


@item @strong{Accents and special characters:} 

The following commands can be used to insert 
@coindex accents
@glindex accents
@emph{accents} and 
@coindex special characters
@glindex special characters
@emph{special characters}. 


@table @asis 


@item @code{@@`@{o@}} 
@result{}
@coindex @@` command
@glindex @@` command 
@`o 
@item @code{@@'@{o@}} 
@result{}
@coindex @@' command
@glindex @@' command 
@\o 
@item @code{@@^@{o@}} 
@result{}
@coindex @@^ command
@glindex @@^ command 
@^o 
@item @code{@@..@{o@}} 
@result{}
@coindex @@.. command
@glindex @@.. command 
@"o 
@item @code{@@~@{o@}} 
@result{}
@coindex @@~ command
@glindex @@~ command 
@~o 
@item @code{@@=@{o@}} 
@result{}
@coindex @@= command
@glindex @@= command 
@=o 
@item @code{@@.@{o@}} 
@result{}
@coindex @@. command
@glindex @@. command 
@dotaccent{o} 
@item @code{@@u@{o@}} 
@result{}
@coindex @@u command
@glindex @@u command 
@u{o} 
@item @code{@@v@{o@}} 
@result{}
@coindex @@v command
@glindex @@v command 
@v{o} 
@item @code{@@H@{o@}} 
@result{}
@coindex @@H command
@glindex @@H command 
@H{o} 
@item @code{@@t@{oo@}} 
@result{}
@coindex @@t command
@glindex @@t command 
@tieaccent{oo} 
@item @code{@@c@{o@}} 
@result{}
@coindex @@c command
@glindex @@c command 
@,{o} 
@item @code{@@d@{o@}} 
@result{}
@coindex @@d command
@glindex @@d command 
@udotaccent{o} 
@item @code{@@b@{o@}} 
@result{}
@coindex @@b command
@glindex @@b command 
@ubaraccent{o} 
@item @code{@@oe} 
@result{}
@coindex @@oe command
@glindex @@oe command 
@oe{} 
@item @code{@@OE} 
@result{}
@coindex @@OE command
@glindex @@OE command 
@OE{} 
@item @code{@@ae} 
@result{}
@coindex @@ae command
@glindex @@ae command 
@ae{} 
@item @code{@@AE} 
@result{}
@coindex @@AE command
@glindex @@AE command 
@AE{} 
@item @code{@@aa} 
@result{}
@coindex @@aa command
@glindex @@aa command 
@aa{} 
@item @code{@@AA} 
@result{}
@coindex @@AA command
@glindex @@AA command 
@AA{} 
@item @code{@@o} 
@result{}
@coindex @@o command
@glindex @@o command 
@o{} 
@item @code{@@O} 
@result{}
@coindex @@O command
@glindex @@O command 
@O{} 
@item @code{@@l} 
@result{}
@coindex @@l command
@glindex @@l command 
@l{} 
@item @code{@@L} 
@result{}
@coindex @@L command
@glindex @@L command 
@L{} 
@item @code{@@ss} 
@result{}
@coindex @@ss command
@glindex @@ss command 
@ss{} 
@item @code{@@?} 
@result{}
@coindex @@? command
@glindex @@? command 
@questiondown{} 
@item @code{@@!} 
@result{}
@coindex @@! command
@glindex @@! command 
@exclamdown{} 
@item @code{@@i} 
@result{}
@coindex @@i command
@glindex @@i command 
@dotless{i} 
@item @code{@@j} 
@result{}
@coindex @@j command
@glindex @@j command 
@dotless{j} 
@item @code{@@copyright} 
@result{}
@coindex @@copyright command
@glindex @@copyright command 
@copyright{} 
@item @code{@@iso} 
@result{}
@coindex @@iso command
@glindex @@iso command 
@key{ @bullet{} ISO @bullet{} } 
@item @code{@@bullet} 
@result{}
@coindex @@bullet command
@glindex @@bullet command 
@bullet{} 
@item @code{@@result} 
@result{}
@coindex @@result command
@glindex @@result command 
@result{} 


@end table  


@item @strong{Inclusion commands:} 


@coindex including code
@glindex including code 
@coindex including files
@glindex including files 
@coindex including images
@glindex including images 

The following commands are used to include code or strings of text as part of documentation. The latter may reside in external files or in the file being documented. The former must be part of the module being documented. There are also commands for inserting and scaling images. 


@table @asis 


@item @code{@@include@{}@emph{filename}@code{@}} 
@coindex @@include command
@glindex @@include command 
the contents of @emph{filename} will be included in-line, as if they were part of the string. This is useful for common pieces of documentation or storing in a separate file long explanations if they are perceived to clutter the source file. 


@item @code{@@includeverbatim@{}@emph{filename}@code{@}} 
@coindex @@includeverbatim command
@glindex @@includeverbatim command 
as above, but the contents of the file are included verbatim, i.e., commands within the file are not interpreted. This is useful for including code examples which may contain @code{@@}'s, etc. 


@item @code{@@includefact@{}@emph{factname}@code{@}} 
@coindex @@includefact command
@glindex @@includefact command 
it is assumed that the file being documented contains a fact of the predicate @emph{factname}@code{/1}, whose argument is a character string. The contents of that character string will be included in-line, as if they were part of the documentation string. This is useful for 
@coindex sharing pieces of text
@glindex sharing pieces of text
@emph{sharing pieces of text} between the documentation and the running code. An example is the text which explains the 
@coindex usage of a command
@glindex usage of a command
@emph{usage of a command} (options, etc.). 


@item @code{@@includedef@{}@emph{predname}@code{@}} 
@coindex @@includedef command
@glindex @@includedef command 
it is assumed that the file being documented contains a definition for the predicate @emph{predname}. The clauses defining this predicate will be included in-line, in verbatim mode, as if they were part of the documentation string. 
@coindex including a predicate definition
@glindex including a predicate definition 


@item @code{@@image@{}@emph{epsfile}@code{@}} 
@coindex @@image command
@glindex @@image command 
@coindex including an image
@glindex including an image
@emph{including an image} at point, 
@coindex images, inserting
@glindex images, inserting 
contained in file @emph{epsfile}. The 
@coindex image file
@glindex image file
@emph{image file} should be in 
@coindex encapsulated postscript
@glindex encapsulated postscript
@emph{encapsulated postscript} format. 


@item 
@coindex images, scaling
@glindex images, scaling 
@code{@@image@{}@emph{epsfile}@code{@}@{}@emph{width}@code{@}@{}@emph{height}@code{@}} 
@coindex @@image command
@glindex @@image command 
same as above, but @emph{width} and @emph{height} should be integers which provide a size (in points) to which the image will be scaled. 


@end table  


@end itemize  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{version_descriptor / 1 (pred)}}}
@temp
@end iftex
@pdindex version_descriptor/1 
@glindex version_descriptor/1 
@deffn PREDICATE version_descriptor/1:



A structure denoting a complete version description: 
@smallexample 
version_descriptor(version('Version','Date','Time')) :-
        version_number('Version'),
        ymd_date('Date'),
        time_struct('Time') .

version_descriptor(version('Version','Date')) :-
        version_number('Version'),
        ymd_date('Date') .

@end smallexample 


@end deffn
@sp 1



@node Documentation on internals (comments), next,  previous,  up
@comment node-name, next,  previous,  up
@section Documentation on internals (@code{comments})
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{version_number / 1 (pred)}}}
@temp
@end iftex
@pdindex version_number/1 
@glindex version_number/1 
@deffn PREDICATE version_number/1:



@code{Version} is a structure denoting a complete version number (major version, minor version, and patch number): 


@smallexample 
version_number('Major' * 'Minor' + 'Patch') :-
        int('Major'),
        int('Minor'),
        int('Patch') .

@end smallexample  



@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{ymd_date / 1 (pred)}}}
@temp
@end iftex
@pdindex ymd_date/1 
@glindex ymd_date/1 
@deffn PREDICATE ymd_date/1:



A Year/Month/Day structure denoting a date: 
@smallexample 
ymd_date('Y' / 'M' / 'D') :-
        int('Y'),
        int('M'),
        int('D') .

@end smallexample 
.

@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{time_struct / 1 (pred)}}}
@temp
@end iftex
@pdindex time_struct/1 
@glindex time_struct/1 
@deffn PREDICATE time_struct/1:



A struture containing time information: 
@smallexample 
time_struct('Hours' : 'Minutes' * 'Seconds' + 'TimeZone') :-
        int('Hours'),
        int('Minutes'),
        int('Seconds'),
        atm('TimeZone') .

@end smallexample 


@end deffn
@sp 1

